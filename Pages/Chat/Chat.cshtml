@page
@model VideoScriptAI.Pages.ChatModel
@{
    ViewData["Title"] = "Video Script AI Assistant";
}

<div class="chat-page-container">
    <!-- Chat History Sidebar -->
    <div class="chat-sidebar">
        <div class="sidebar-header">
            <h3>Chat History</h3>
            <form method="post" asp-page-handler="NewChat">
                <button type="submit" class="btn btn-sm btn-primary">New Chat</button>
            </form>
        </div>

        <div class="chat-history-list">
            @if (Model.ChatHistory.Any())
            {
                foreach (var chat in Model.ChatHistory)
                {
                    <a href="/Chat?id=@chat.Id" class="chat-history-item @(chat.Id == Model.CurrentChatId ? "active" : "")">
                        <div class="chat-history-title">@chat.Title</div>
                        <div class="chat-history-date">@chat.CreatedAt.ToString("MMM dd, HH:mm")</div>
                    </a>
                }
            }
            else
            {
                <div class="no-history">No previous chats</div>
            }
        </div>
    </div>

    <!-- Main Chat Area -->
    <div class="chat-container">
        <div class="chat-header">
            <h1>Video Script AI Assistant</h1>
            <p>Chat with our AI to help create and refine your video scripts</p>
        </div>

        <div class="chat-history" id="chatHistory">
            @if (Model.ChatMessages.Any())
            {
                foreach (var message in Model.ChatMessages)
                {
                    <div class="message @(message.IsUser ? "user-message" : "ai-message")">
                        <div class="message-content">
                            <span class="message-author">@(message.IsUser ? "You" : "AI Assistant")</span>
                            <p>@Html.Raw(message.FormattedText)</p>
                            <span class="message-time">@message.Timestamp.ToString("HH:mm")</span>
                        </div>
                    </div>
                }
            }
        </div>

        @if (Model.IsProcessing)
        {
            <div class="typing-indicator">
                <span></span>
                <span></span>
                <span></span>
            </div>
        }

        <div class="chat-input">
            <form method="post" id="chatForm" asp-page-handler="SendMessage">
                <input type="hidden" asp-for="CurrentChatId" />
                <div class="input-group">
                    <textarea asp-for="NewMessage" class="form-control" placeholder="Type your message here..." rows="2" required></textarea>
                    <button type="submit" class="btn btn-primary" id="sendButton">
                        <i class="fas fa-paper-plane"></i> Send
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Scroll chat to bottom when loaded
        document.addEventListener('DOMContentLoaded', function() {
            scrollChatToBottom();
        });

        // Scroll chat to bottom when new messages arrive
        function scrollChatToBottom() {
            const chatHistory = document.getElementById('chatHistory');
            chatHistory.scrollTop = chatHistory.scrollHeight;
        }

        // Auto-expand textarea as user types
        const textarea = document.querySelector('textarea');
        textarea.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight) + 'px';
            if (this.scrollHeight > 150) {
                this.style.height = '150px';
                this.style.overflowY = 'auto';
            }
        });

        // Handle form submission with AJAX
        const form = document.getElementById('chatForm');
        form.addEventListener('submit', function(e) {
            e.preventDefault();

            const textarea = document.querySelector('textarea');
            const messageText = textarea.value.trim();
            if (!messageText) return;

            // Disable the button and show loading state
            const sendButton = document.getElementById('sendButton');
            sendButton.disabled = true;
            sendButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>';

            // Add user message immediately
            addMessageToChat(messageText, true);

            // Clear input
            textarea.value = '';
            textarea.style.height = 'auto';

            // Show typing indicator
            const typingIndicator = document.createElement('div');
            typingIndicator.className = 'typing-indicator';
            typingIndicator.innerHTML = '<span></span><span></span><span></span>';
            document.querySelector('.chat-history').appendChild(typingIndicator);

            scrollChatToBottom();

            // Send AJAX request
            const formData = new FormData(form);

            fetch('/Chat?handler=SendMessage', {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => response.json())
            .then(data => {
                // Remove typing indicator
                document.querySelector('.typing-indicator')?.remove();

                if (data.success) {
                    // Add AI response
                    addMessageToChat(data.aiMessage.text, false);

                    // Update current chat ID if this is a new chat
                    if (data.chatId && !document.querySelector('input[name="CurrentChatId"]').value) {
                        document.querySelector('input[name="CurrentChatId"]').value = data.chatId;

                        // Reload page to update chat history (for simplicity)
                        // In a more sophisticated app, you would update the sidebar dynamically
                        setTimeout(() => window.location.href = `/Chat?id=${data.chatId}`, 1000);
                    }
                } else {
                    addMessageToChat("Sorry, I encountered an error. Please try again.", false);
                }
                scrollChatToBottom();
            })
            .catch(error => {
                console.error('Error:', error);
                document.querySelector('.typing-indicator')?.remove();
                addMessageToChat("Sorry, I encountered an error. Please try again.", false);
                scrollChatToBottom();
            })
            .finally(() => {
                sendButton.disabled = false;
                sendButton.innerHTML = '<i class="fas fa-paper-plane"></i> Send';
            });
        });

        function addMessageToChat(text, isUser) {
            const chatHistory = document.getElementById('chatHistory');
            const now = new Date();
            const timeString = now.getHours().toString().padStart(2, '0') + ':' +
                              now.getMinutes().toString().padStart(2, '0');

            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isUser ? 'user-message' : 'ai-message'}`;

            // Format the message text with basic formatting
            const formattedText = formatMessage(text);

            messageDiv.innerHTML = `
                <div class="message-content">
                    <span class="message-author">${isUser ? 'You' : 'AI Assistant'}</span>
                    <p>${formattedText}</p>
                    <span class="message-time">${timeString}</span>
                </div>
            `;

            chatHistory.appendChild(messageDiv);
        }

        function formatMessage(text) {
            // Convert line breaks to <br>
            text = text.replace(/\n/g, '<br>');

            // Format bullet points
            text = text.replace(/•\s+(.*?)(?=<br>|$)/g,
                '<span style="display:flex"><span style="margin-right:8px">•</span><span>$1</span></span>');

            // Bold text (** **)
            text = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');

            // Italic text (* *)
            text = text.replace(/\*([^*]+)\*/g, '<em>$1</em>');

            return text;
        }
    </script>
}

<style>
    .chat-page-container {
        display: flex;
        height: calc(100vh - 120px);
        width: 100%;
        max-width: 1400px;
        margin: 0 auto;
    }

    .chat-sidebar {
        width: 260px;
        background-color: #2c3e50;
        color: white;
        display: flex;
        flex-direction: column;
        border-radius: 10px 0 0 10px;
        overflow: hidden;
    }

    .sidebar-header {
        padding: 15px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .sidebar-header h3 {
            margin: 0;
            font-size: 16px;
        }

    .chat-history-list {
        flex: 1;
        overflow-y: auto;
        padding: 10px 0;
    }

    .chat-history-item {
        padding: 10px 15px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.05);
        cursor: pointer;
        display: block;
        color: rgba(255, 255, 255, 0.8);
        text-decoration: none;
        transition: background-color 0.2s;
    }

        .chat-history-item:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .chat-history-item.active {
            background-color: rgba(255, 255, 255, 0.15);
            border-left: 3px solid #3498db;
        }

    .chat-history-title {
        font-size: 14px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .chat-history-date {
        font-size: 11px;
        opacity: 0.6;
        margin-top: 4px;
    }

    .no-history {
        padding: 15px;
        text-align: center;
        color: rgba(255, 255, 255, 0.5);
    }

    .chat-container {
        flex: 1;
        display: flex;
        flex-direction: column;
        background-color: #f8f9fa;
        border-radius: 0 10px 10px 0;
        overflow: hidden;
    }

    .chat-header {
        padding: 20px;
        background-color: #343a40;
        color: white;
        text-align: center;
    }

        .chat-header h1 {
            margin: 0;
            font-size: 24px;
            font-weight: bold;
        }

        .chat-header p {
            margin: 8px 0 0;
            opacity: 0.8;
        }

    .chat-history {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .message {
        display: flex;
        margin-bottom: 10px;
    }

    .user-message {
        justify-content: flex-end;
    }

    .ai-message {
        justify-content: flex-start;
    }

    .message-content {
        max-width: 80%;
        padding: 12px 15px;
        border-radius: 10px;
        position: relative;
    }

    .user-message .message-content {
        background-color: #007bff;
        color: white;
        border-top-right-radius: 0;
    }

    .ai-message .message-content {
        background-color: #e9ecef;
        color: #212529;
        border-top-left-radius: 0;
    }

    .message-author {
        font-size: 12px;
        font-weight: bold;
        margin-bottom: 5px;
        display: block;
    }

    .message-time {
        font-size: 10px;
        opacity: 0.7;
        display: block;
        text-align: right;
        margin-top: 5px;
    }

    .message-content p {
        margin: 0;
        word-wrap: break-word;
        white-space: pre-wrap;
    }

    .message-content ul {
        margin: 10px 0;
        padding-left: 20px;
    }

    .chat-input {
        padding: 15px;
        background-color: white;
        border-top: 1px solid #dee2e6;
    }

    .input-group {
        display: flex;
    }

    textarea {
        resize: none;
        overflow-y: hidden;
        min-height: 44px;
        border-radius: 22px;
        padding: 10px 15px;
    }

    .btn-primary {
        border-radius: 22px;
        margin-left: 10px;
        padding: 0 20px;
    }

    .typing-indicator {
        padding: 15px;
        background-color: white;
        text-align: center;
        margin-bottom: 10px;
    }

        .typing-indicator span {
            display: inline-block;
            width: 10px;
            height: 10px;
            background-color: #e0e0e0;
            border-radius: 50%;
            margin: 0 3px;
            animation: typing 1.5s infinite ease-in-out;
        }

            .typing-indicator span:nth-child(1) {
                animation-delay: 0s;
            }

            .typing-indicator span:nth-child(2) {
                animation-delay: 0.3s;
            }

            .typing-indicator span:nth-child(3) {
                animation-delay: 0.6s;
            }

    @keyframes typing {
        0%, 100%

    {
        transform: translateY(0);
    }

    50% {
        transform: translateY(-5px);
    }

    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
        .chat-page-container {
            flex-direction: column;
            height: auto;
        }

        .chat-sidebar {
            width: 100%;
            border-radius: 10px 10px 0 0;
            max-height: 200px;
        }

        .chat-container {
            border-radius: 0 0 10px 10px;
        }

    }
</style>